---
title: "Biostat 203B Homework 3"
subtitle: "Due Feb 21 @ 11:59PM"
author: "Your Name and UID"
format:
  html:
    theme: cosmo
    embed-resources: true
    number-sections: false
    toc: true
    toc-depth: 4
    toc-location: left
    code-fold: false
---

Display machine information for reproducibility:
```{r}
sessionInfo()
```

Load necessary libraries (you can add more as needed).
```{r setup}
library(arrow)
library(gtsummary)
library(memuse)
library(pryr)
library(R.utils)
library(tidyverse)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
```

Display your machine memory.
```{r}
memuse::Sys.meminfo()
```

In this exercise, we use tidyverse (ggplot2, dplyr, etc) to explore the [MIMIC-IV](https://physionet.org/content/mimiciv/3.1/) data introduced in [homework 1](https://ucla-biostat-203b.github.io/2025winter/hw/hw1/hw1.html) and to build a cohort of ICU stays.

## Q1. Visualizing patient trajectory

Visualizing a patient's encounters in a health care system is a common task in clinical data analysis. In this question, we will visualize a patient's ADT (admission-discharge-transfer) history and ICU vitals in the MIMIC-IV data.

### Q1.1 ADT history

A patient's ADT history records the time of admission, discharge, and transfer in the hospital. This figure shows the ADT history of the patient with `subject_id` 10001217 in the MIMIC-IV data. The x-axis is the calendar time, and the y-axis is the type of event (ADT, lab, procedure). The color of the line segment represents the care unit. The size of the line segment represents whether the care unit is an ICU/CCU. The crosses represent lab events, and the shape of the dots represents the type of procedure. The title of the figure shows the patient's demographic information and the subtitle shows top 3 diagnoses.

![](10001217_adt.png)
Do a similar visualization for the patient with `subject_id` 10063848 using ggplot.

Hint: We need to pull information from data files `patients.csv.gz`, `admissions.csv.gz`, `transfers.csv.gz`, `labevents.csv.gz`, `procedures_icd.csv.gz`, `diagnoses_icd.csv.gz`, `d_icd_procedures.csv.gz`, and `d_icd_diagnoses.csv.gz`. For the big file `labevents.csv.gz`, use the Parquet format you generated in Homework 2. For reproducibility, make the Parquet folder `labevents_pq` available at the current working directory `hw3`, for example, by a symbolic link. Make your code reproducible.

```{r}
# Read all files
patients <- read_csv("~/mimic/hosp/patients.csv.gz")
admissions <- read_csv("~/mimic/hosp/admissions.csv.gz")
transfers <- read_csv("~/mimic/hosp/transfers.csv.gz")
labevents <- open_dataset("~/mimic/hosp/labevents.parquet")  # Read parquet
procedures_icd <- read_csv("~/mimic/hosp/procedures_icd.csv.gz")
d_icd_procedures <- read_csv("~/mimic/hosp/d_icd_procedures.csv.gz")
diagnoses_icd <- read_csv("~/mimic/hosp/diagnoses_icd.csv.gz")
d_icd_diagnoses <- read_csv("~/mimic/hosp/d_icd_diagnoses.csv.gz")
head(procedures_icd, 10)
print(d_icd_procedures)
```
select the data
```{r}
# Filter the data
patient10063848 <- patients |>
  filter(subject_id == 10063848) 
ADT10063848 <- admissions |>
  filter(subject_id == 10063848) |>
  left_join(transfers, by = c("subject_id", "hadm_id"))
print(ADT10063848)
ADT10063848 <- ADT10063848 |>
  select(subject_id, hadm_id, eventtype, careunit, intime, outtime) |>
  mutate(
    intime_date = as.Date(intime),
    outtime_date = as.Date(outtime)
  )

# Labevents
labs10063848 <- labevents |>
  filter(subject_id == 10063848) |>
  select(subject_id, charttime) |>
  collect() |>
  mutate(
    chartdate = as.Date(charttime)
  )

# Procedures
procedures10063848 <- procedures_icd |>
  filter(subject_id == 10063848) |>
  left_join(d_icd_procedures, by = "icd_code") |>
  select(subject_id, chartdate, long_title) 
# Diagnoses
diagnoses10063848 <- diagnoses_icd |>
  filter(subject_id == 10063848) |>
  left_join(d_icd_diagnoses, by = "icd_code") |>
  slice_head(n = 3) 
```
generate the graph
```{r}
ADT10063848 <- ADT10063848 %>%
  mutate(is_icu = if_else
         (grepl("ICU", careunit, ignore.case = TRUE), 3.5, 0.8))
procedures10063848 <- procedures10063848 %>%
  mutate(
    procedure_type = case_when(
      grepl("Small Intestine|Peritoneal Cavity", 
            long_title) ~ "Abdominal Surgery",
      grepl("Cardiac", long_title) ~ "Cardiac Surgery",
      grepl("Infusion Device|Superior Vena Cava", 
            long_title) ~ "Vascular Surgery",
      TRUE ~ "Other"
    ),
    shape = case_when(
      procedure_type == "Abdominal Surgery" ~ 16,  # Cycle
      procedure_type == "Cardiac Surgery" ~ 17,   # Triangle
      procedure_type == "Vascular Surgery" ~ 15,  # Square
      TRUE ~ 19                                  # Default
    )
  )
diagnoses_text <- paste(diagnoses10063848$long_title, collapse = "\n") |>
  print()

ggplot() +
  geom_segment(
    data = ADT10063848 |>
      filter(careunit != "UNKNOWN"),
    aes(
      x = intime_date,
      xend = outtime_date,
      y = "ADT",
      yend = "ADT",
      color = careunit,
      linewidth = is_icu
    )
  ) +
  geom_point(
  data = labs10063848,
  aes(x = chartdate, y = "Lab"),
  shape = 4, size = 3
  ) +
  geom_point(
    data = procedures10063848,
    aes(x = chartdate, y = "Procedure", 
        shape = factor(shape), color = procedure_type),
    size = 3
  ) +
  scale_shape_manual(values = c(16, 17, 15, 19)) +
  labs(title = "Patient 10063848, F, 75 years old, white",
       subtitle = diagnoses_text,
       x = "Date",
       y = "",
       shape = "Procedure Type",
       color = "Procedure Type") +
  theme_minimal()

```

### Q1.2 ICU stays

ICU stays are a subset of ADT history. This figure shows the vitals of the patient `10001217` during ICU stays. The x-axis is the calendar time, and the y-axis is the value of the vital. The color of the line represents the type of vital. The facet grid shows the abbreviation of the vital and the stay ID.

![](10001217_icu.png)

Do a similar visualization for the patient `10063848`.

```{r,eval=FALSE}
library(arrow)
library(data.table)

csv_file <- "~/mimic/icu/chartevents.csv.gz"
parquet_dir <- "chartevents_pq"

system(paste("gunzip -k", csv_file))  # Depress
unzipped_file <- sub(".gz$", "", csv_file)

csv_file <- "~/mimic/icu/chartevents.csv"
num_rows <- fread(csv_file, select = 1, showProgress = TRUE)[, .N]
print(num_rows)


chartevent_arrow <- arrow::open_dataset(
  sources = "~/mimic/icu/chartevents.csv",
  schema = NULL,
  format = "csv"
) 
print(chartevent_arrow)
nrow(chartevent_arrow)

arrow::write_dataset(
  chartevent_arrow,
  path = "~/mimic/icu",
  format = "parquet"
)

# Rename the file in terminal
# Open the file
chartevent_parquet <- arrow::open_dataset(
  sources = "~/mimic/icu/chartevents.parquet"
)
nrow(chartevent_parquet)
```
filter the data 
```{r}
vital_10063848 <- open_dataset("~/mimic/icu/chartevents.parquet") |>
  filter(subject_id == 10063848) |>
  collect()
print(vital_10063848)

# Open the file
d_itemid <- read.csv("~/mimic/icu/d_items.csv.gz")
print(d_itemid)
# HR, NBPd, NBP, RR, temperature
vitals_data <- vital_10063848 |>
  left_join(d_itemid, by = "itemid") |>
  filter(itemid %in% c(220045, 220179, 220180, 220210, 223761)) |>
  select(subject_id, charttime, itemid, label, value) |>
  print()

```
generate the graph
```{r}
vitals_data <- vitals_data |>
  mutate(charttime = as.POSIXct(charttime)) |>
  arrange(subject_id, charttime)
vitals_data_filtered <- vitals_data |>
  mutate(time_window = 
           as.POSIXct(floor(as.numeric(charttime) / (6 * 3600)) * (6 * 3600), 
                      origin = "1970-01-01")) |>
  group_by(subject_id, time_window, label) |>
  slice_min(charttime) |>
  ungroup()
vitals_data_filtered <- vitals_data_filtered %>%
  arrange(subject_id, charttime)

# Generate the plot
ggplot(vitals_data_filtered, aes(x = charttime,
                                 y = value, 
                                 color = label, 
                                 group = label)) + 
  geom_line() +  
  geom_point() +  
  facet_wrap(~ label, scales = "free_y") +  
  labs(
    title = "Vitals of Patient 10063848 during ICU Stay",
    x = "Time",
    y = "Vital Value",
    color = "Vital Type"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    strip.text = element_text(size = 12),
    legend.position = "none"
  )


```

## Q2. ICU stays

`icustays.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/icustays/>) contains data about Intensive Care Units (ICU) stays. The first 10 lines are
```{bash}
zcat < ~/mimic/icu/icustays.csv.gz | head
```

### Q2.1 Ingestion

Import `icustays.csv.gz` as a tibble `icustays_tble`. 
```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz")
head(icustays_tble, 10)
```

### Q2.2 Summary and visualization

How many unique `subject_id`? Can a `subject_id` have multiple ICU stays? Summarize the number of ICU stays per `subject_id` by graphs.
**answer**
There are 65366 unique `subject_id`, 94458 ICU stays, so a `subject_id` can have more than one ICU stays. 
```{r}
distinct(icustays_tble, subject_id, .keep_all = FALSE) |>
  nrow()
nrow(icustays_tble)
# Create a new tibble to calculate the number of ICU stays per `subject_id`
num_icustays <- icustays_tble |>
  group_by(subject_id) |>
  summarise(num_icustays_perid = n()) |>
  print()
# Histogram
ggplot(num_icustays, aes(x = num_icustays_perid)) +
  geom_histogram(binwidth = 1) +
  labs(title = "Distribution of ICU Stays per Subject ID",
       x = "Number of ICU Stays",
       y = "Number of Subjects")
```

## Q3. `admissions` data

Information of the patients admitted into hospital is available in `admissions.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/admissions/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/admissions.csv.gz | head
zcat < ~/mimic/hosp/admissions.csv.gz | wc -l
ls -lh ~/mimic/hosp/admissions.csv.gz
```

### Q3.1 Ingestion

Import `admissions.csv.gz` as a tibble `admissions_tble`.
```{r}
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") |>
  print()
```

### Q3.2 Summary and visualization

Summarize the following information by graphics and explain any patterns you see.

- number of admissions per patient  
- admission hour (anything unusual?)  
- admission minute (anything unusual?)  
- length of hospital stay (from admission to discharge) (anything unusual?)  

According to the [MIMIC-IV documentation](https://mimic.mit.edu/docs/iv/about/concepts/#date-shifting), 

> All dates in the database have been shifted to protect patient confidentiality. Dates will be internally consistent for the same patient, but randomly distributed in the future. Dates of birth which occur in the present time are not true dates of birth. Furthermore, dates of birth which occur before the year 1900 occur if the patient is older than 89. In these cases, the patient’s age at their first admission has been fixed to 300.

```{r}
# Calculate number of admissions per patient and create graph
num_admission <- admissions_tble |>
  group_by(subject_id) |>
  summarise(num_admission_perpatient = n()) |>
  print()
ggplot(num_admission, aes(x = num_admission_perpatient)) + 
  geom_histogram(binwidth = 1) +
  labs(title = "Distribution of numbers of admission per subject ID",
       x = "Number of admissions",
       y = "Number of Subjects") +
  scale_x_continuous(breaks = seq(0, 50, by = 1))

time_admissions <- admissions_tble |>
  summarise(admission_hour = as.numeric(format(admittime, "%H")), 
            admission_minute = as.numeric(format(admittime, "%M")), 
            length_of_stay = as.numeric((difftime(dischtime, 
                                       admittime, 
                                       units = "hours"))),
            admittime,
            dischtime
            ) 
ggplot(time_admissions, aes(x = admission_hour)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Admission Hour Distribution", x = "Hour of Admission", 
       y = "Frequency")
ggplot(time_admissions, aes(x = admission_minute)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Admission Minute Distribution", x = "Minute of Admission",
       y = "Frequency")
ggplot(time_admissions, aes(x = length_of_stay)) +
  geom_histogram(binwidth = 1, fill = "blue", color = "black") +
  labs(title = "Length of Hospital Stay", x = "Length of Stay (hours)", 
       y = "Frequency")
slice_max(time_admissions, n = 10, order_by = length_of_stay) |>
  print()
slice_min(time_admissions, n = 10, order_by = length_of_stay) |>
  print()
```
**answer**
1. The distribution of the number of admissions per patient was cognitively consistent with the majority of patients being admitted to the hospital only once, with a few patients having multiple admissions recorded.
2. The histogram of hours of admission shows that admissions are not evenly distributed, with peaks at certain times of the day and fewer admissions in the late night hours, presumably because only emergency departments will accept patients at night, so most patients will be processed for admission during daytime hospital hours. The unusual peak at 0:00 is speculated to be due to the hospital's randomized distribution of data processing times.
3. The distribution of admission minutes is not uniformly randomized, which should be attributed to the way hospitals process time data for the admission process. For example, patients who cannot be accurately counted for admission time are recorded as an adjacent quater moment, which leads to an abnormal increase in the number of 0, 15, 30, and 45 minute data.
4. Most of the patients were hospitalized for only a few days, and some had negative values, presumably due to improper manipulation of the hospital's hidden patient information for time conversion processing resulting in discharges earlier than admissions.

## Q4. `patients` data

Patient information is available in `patients.csv.gz`. See <https://mimic.mit.edu/docs/iv/modules/hosp/patients/> for details of each field in this file. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/patients.csv.gz | head
```

### Q4.1 Ingestion

Import `patients.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/patients/>) as a tibble `patients_tble`.
```{r}
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz")
```

### Q4.2 Summary and visualization

Summarize variables `gender` and `anchor_age` by graphics, and explain any patterns you see.
```{r}
sum_patients <- patients_tble |>
  summarise(gender, anchor_age) |>
  print() 
# Boxplot
sum_patients |>
  ggplot(aes(x = gender, y = anchor_age)) +
  geom_boxplot() +
  theme_minimal()
# Histogram
ggplot(patients_tble, aes(x = anchor_age, fill = gender)) +
  geom_histogram(binwidth = 5, position = "dodge", alpha = 0.7) +
  labs(title = "Age Distribution by Gender (Histogram)",
       x = "Anchor Age",
       y = "Frequency",
       fill = "Gender") +
  theme_minimal()
# Density
ggplot(patients_tble, aes(x = anchor_age, fill = gender)) +
  geom_density(alpha = 0.7) +
  labs(title = "Age Distribution by Gender (Density Plot)",
       x = "Anchor Age",
       y = "Density",
       fill = "Gender") +
  theme_minimal()
```
**answer**
Younger males are distributed in greater numbers than females, females are distributed in greater numbers than males between the ages of 40 and 80, and there are more people overall at younger ages and fewer at older ages, but the decreasing trend reverses at age 40 and there is another small peak at age 60.

## Q5. Lab results

`labevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/labevents/>) contains all laboratory measurements for patients. The first 10 lines are
```{bash}
zcat < ~/mimic/hosp/labevents.csv.gz | head 
zcat < ~/mimic/icu/icustays.csv.gz | head

```

`d_labitems.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/hosp/d_labitems/>) is the dictionary of lab measurements. 
```{bash}
zcat < ~/mimic/hosp/d_labitems.csv.gz | head
```

We are interested in the lab measurements of creatinine (50912), potassium (50971), sodium (50983), chloride (50902), bicarbonate (50882), hematocrit (51221), white blood cell count (51301), and glucose (50931). Retrieve a subset of `labevents.csv.gz` that only containing these items for the patients in `icustays_tble`. Further restrict to the last available measurement (by `storetime`) before the ICU stay. The final `labevents_tble` should have one row per ICU stay and columns for each lab measurement.

![](labevents_tble.png)


Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `labevents_pq` folder available at the current working directory `hw3`, for example, by a symbolic link.

```{r}
# Open icustays and select time
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") %>%
  select(subject_id, stay_id, intime, outtime)


# Open labitems 
lab_itemids <- c(50912, 50971, 50983, 50902, 50882, 51221, 51301, 50931)
d_labitems <- read_csv("~/mimic/hosp/d_labitems.csv.gz") %>%
  filter(itemid %in% lab_itemids) %>%
  select(itemid, label)
print(d_labitems)

# Open labevents and select
labevents_filter <- open_dataset("~/mimic/hosp/labevents.parquet") %>%
  filter(itemid %in% lab_itemids) %>%
  select(subject_id, itemid, valuenum, storetime) %>%
  collect()
# Join labitems
labevents_filter <- labevents_filter %>%
  arrange(subject_id, itemid) %>%
  semi_join(icustays, by = c("subject_id")) %>% # Filter patients in icustay
  left_join(d_labitems, by = "itemid") 
print(labevents_filter)

# Get wider format
labevents_icujoined <- labevents_filter %>% 
  left_join(icustays, by = c("subject_id")) 
print(labevents_icujoined)
labevents_timefilter <- labevents_icujoined %>% 
  group_by(stay_id) %>%
  filter(storetime < intime) %>%
  ungroup()
print(labevents_timefilter) 
labevents_timeselect <- labevents_timefilter %>%
  group_by(subject_id, itemid, stay_id) %>%
  arrange(storetime, .by_group = TRUE) %>%
  # Keep only the last lab measurement
  slice_tail(n = 1) %>%
  ungroup() %>%
  print()
# Wide format
labevents_tble <- labevents_timeselect %>%
  # Delete column
  select(-c(itemid, storetime, intime, outtime)) %>%
  pivot_wider(
    names_from = label,
    values_from = valuenum
  ) %>%
  # Rename `White Blood Cells` to wbc
  rename(wbc = `White Blood Cells`) %>%
  print(width = Inf) 

labevents_tble %>%
  write_rds("labevents_tble.rds")

```
## Q6. Vitals from charted events

`chartevents.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/chartevents/>) contains all the charted data available for a patient. During their ICU stay, the primary repository of a patient’s information is their electronic chart. The `itemid` variable indicates a single measurement type in the database. The `value` variable is the value measured for `itemid`. The first 10 lines of `chartevents.csv.gz` are
```{bash}
zcat < ~/mimic/icu/chartevents.csv.gz | head
```

`d_items.csv.gz` (<https://mimic.mit.edu/docs/iv/modules/icu/d_items/>) is the dictionary for the `itemid` in `chartevents.csv.gz`. 
```{bash}
zcat < ~/mimic/icu/d_items.csv.gz | head
```

We are interested in the vitals for ICU patients: heart rate (220045), systolic non-invasive blood pressure (220179), diastolic non-invasive blood pressure (220180), body temperature in Fahrenheit (223761), and respiratory rate (220210). Retrieve a subset of `chartevents.csv.gz` only containing these items for the patients in `icustays_tble`. Further restrict to the first vital measurement (by `storetime`) within the ICU stay. The final `chartevents_tble` should have one row per ICU stay and columns for each vital measurement. 

![](chartevents_tble.png)

Hint: Use the Parquet format you generated in Homework 2. For reproducibility, make `chartevents_pq` folder available at the current working directory, for example, by a symbolic link.

```{r}
# Open icustay
icustays <- read_csv("~/mimic/icu/icustays.csv.gz") %>%
  select(subject_id, stay_id, intime, outtime) %>%
  # Define the format
  mutate(
    subject_id = as.double(subject_id),
    stay_id = as.integer(stay_id),
    intime = as.POSIXct(intime),
    outtime = as.POSIXct(outtime)
  )
print(icustays)

# Open d_items
vital_itemids <- c(220045, 220179, 220180, 223761, 220210)
d_items <- read_csv("~/mimic/icu/d_items.csv.gz") %>%
  mutate(itemid = as.integer(itemid)) %>%
  filter(itemid %in% vital_itemids) %>%
  select(itemid, label)
print(d_items)

# Open chartevents and select
chartevents_filter <- open_dataset("~/mimic/icu/chartevents.parquet") %>%
  filter(itemid %in% vital_itemids) %>%
  select(subject_id, itemid, valuenum, storetime) %>%
  collect()
  
# Keep patients in icustay
chartevents_filter <- chartevents_filter %>%
  arrange(subject_id, itemid) %>%
  semi_join(icustays, by = "subject_id") %>%  
  left_join(d_items, by = "itemid")
print(chartevents_filter)

# Join icustay
chartevents_icujoined <- chartevents_filter %>%
  left_join(select(icustays, subject_id, stay_id, intime, outtime),
            by = "subject_id")
print(chartevents_icujoined)

# Filter time data（during intime to outtime）
chartevents_timefilter <- chartevents_icujoined %>%
  group_by(stay_id) %>%
  filter(storetime >= intime, storetime <= outtime) %>%  
  ungroup()
print(chartevents_timefilter)

chartevents_timeselect <- chartevents_timefilter %>%
  group_by(subject_id, itemid, stay_id) %>%
  arrange(storetime, .by_group = TRUE) %>%
  # Keep the first measurement
  slice_head(n = 1) %>%
  ungroup()
print(chartevents_timeselect)

# Change wider format
chartevents_tble <- chartevents_timeselect %>%
  # Delete column
  select(-c(itemid, storetime, intime, outtime)) %>%
  pivot_wider(names_from = label, values_from = valuenum) %>%
  # Rename
  rename(
    HR = `Heart Rate`,
    NBPs = `Non Invasive Blood Pressure systolic`,
    NBPd = `Non Invasive Blood Pressure diastolic`,
    BT = `Temperature Fahrenheit`,
    RR = `Respiratory Rate`
  ) 
print(chartevents_tble)
  

chartevents_tble %>% write_rds("chartevents_tble.rds")

```



## Q7. Putting things together

Let us create a tibble `mimic_icu_cohort` for all ICU stays, where rows are all ICU stays of adults (age at `intime` >= 18) and columns contain at least following variables

- all variables in `icustays_tble`  
- all variables in `admissions_tble`  
- all variables in `patients_tble`
- the last lab measurements before the ICU stay in `labevents_tble` 
- the first vital measurements during the ICU stay in `chartevents_tble`

The final `mimic_icu_cohort` should have one row per ICU stay and columns for each variable.

![](mimic_icu_cohort.png)
```{r}
icustays_tble <- read_csv("~/mimic/icu/icustays.csv.gz") %>%
  print(width = Inf)
patients_tble <- read_csv("~/mimic/hosp/patients.csv.gz") %>%
  print(width = Inf)
admissions_tble <- read_csv("~/mimic/hosp/admissions.csv.gz") %>%
  print(width = Inf)
labevents_tble <- read_rds("labevents_tble.rds") %>%
  print(width = Inf)
chartevents_tble <- read_rds("chartevents_tble.rds") %>%
  print(width = Inf)
mimic_icu_cohort_origin <- icustays_tble %>%
  left_join(admissions_tble, by = c("subject_id", "hadm_id")) %>%
  left_join(patients_tble, by = c("subject_id")) %>%
  left_join(labevents_tble, by = c("subject_id")) %>%
  left_join(chartevents_tble, by = c("subject_id")) %>%
  distinct(stay_id, .keep_all = TRUE) %>%
  print(width = Inf)
mimic_icu_cohort_timefilter <- mimic_icu_cohort_origin %>%
  # compute age at intime
  mutate(age_intime = anchor_age + year(intime) - anchor_year) %>%
  # keep only patients aged over 18 at intime
  filter(age_intime > 18) %>%
  print(width = Inf)
mimic_icu_cohort <- mimic_icu_cohort_timefilter %>%
  distinct(hadm_id, .keep_all = TRUE) %>%
  select(-stay_id) %>%
  print() 
mimic_icu_cohort %>% write_rds("mimic_icu_cohort.rds")
```
## Q8. Exploratory data analysis (EDA)

Summarize the following information about the ICU stay cohort `mimic_icu_cohort` using appropriate numerics or graphs:
```{r}
mimic_icu_cohort <- read_rds("mimic_icu_cohort.rds")
head(mimic_icu_cohort, 5)
```

- Length of ICU stay `los` vs demographic variables (race, insurance, marital_status, gender, age at intime)
```{r}
library(forcats)

# Summary statistics by demographic groups:
summary_by_race <- mimic_icu_cohort %>%
  group_by(race) %>%
  summarize(mean_los = mean(los, na.rm = TRUE),
            median_los = median(los, na.rm = TRUE),
            iqr_los = IQR(los, na.rm = TRUE),
            n = n())
print(summary_by_race)

# Boxplot for LOS by Race
ggplot(mimic_icu_cohort, aes(x = fct_infreq(race), y = los)) +
  geom_boxplot(outlier.colour = "red", fill = "lightblue") +
  labs(title = "ICU Length of Stay by Race",
       x = "Race", y = "Length of ICU Stay (los)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

# Boxplot for LOS by Insurance
ggplot(mimic_icu_cohort, aes(x = fct_infreq(insurance), y = los)) +
  geom_boxplot(outlier.colour = "red", fill = "lightgreen") +
  labs(title = "ICU Length of Stay by Insurance",
       x = "Insurance", y = "Length of ICU Stay (los)") +
  theme_minimal()

# Boxplot for LOS by Marital Status
ggplot(mimic_icu_cohort, aes(x = fct_infreq(marital_status), y = los)) +
  geom_boxplot(outlier.colour = "red", fill = "lightyellow") +
  labs(title = "ICU Length of Stay by Marital Status",
       x = "Marital Status", y = "Length of ICU Stay (los)") +
  theme_minimal()

# Boxplot for LOS by Gender
ggplot(mimic_icu_cohort, aes(x = gender, y = los)) +
  geom_boxplot(outlier.colour = "red", fill = "lightpink") +
  labs(title = "ICU Length of Stay by Gender",
       x = "Gender", y = "Length of ICU Stay (los)") +
  theme_minimal()

# Scatterplot for Age vs LOS (or stratified boxplots by age groups)
ggplot(mimic_icu_cohort, aes(x = age_intime, y = los)) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", color = "blue") +
  labs(title = "Age at ICU Admission vs. Length of ICU Stay",
       x = "Age at ICU Admission", y = "Length of ICU Stay (los)") +
  theme_minimal()

```

- Length of ICU stay `los` vs the last available lab measurements before ICU stay
```{r}
library(purrr)
# Calculate correlation coefficients between los and each lab measurement
lab_vars <- c("Bicarbonate", "Chloride", "Creatinine", "Glucose", "Potassium", 
              "Sodium", "Hematocrit", "wbc")

correlations <- mimic_icu_cohort %>%
  select(los, all_of(lab_vars)) %>%
  summarise(across(all_of(lab_vars), 
                   ~ cor(los, .x, use = "complete.obs"))) %>%
  pivot_longer(everything(), names_to = "Variable", values_to = "Correlation")

print(correlations)

# Create scatter plots with a linear regression line 
plots <- map(lab_vars, function(var) {
  ggplot(mimic_icu_cohort, aes_string(x = var, y = "los")) +
    geom_point(alpha = 0.3) +
    geom_smooth(method = "lm", color = "blue", se = TRUE) +
    labs(title = str_c("ICU LOS vs ", var),
         x = var, y = "ICU Length of Stay (los)") +
    theme_minimal()
})

# Display one of the plots (for example, the plot for Creatinine)
print(plots[[3]])

# Optionally, you can arrange all plots in a grid if desired:
# library(patchwork)
# wrap_plots(plots)

```
- Length of ICU stay `los` vs the first vital measurements within the ICU stay
```{r}
# Calculate correlation coefficients between los and each vital measurement
vital_vars <- c("HR", "NBPs", "NBPd", "BT", "RR")

vital_correlations <- mimic_icu_cohort %>%
  select(los, all_of(vital_vars)) %>%
  summarise(across(all_of(vital_vars), 
                   ~ cor(los, .x, use = "complete.obs"))) %>%
  pivot_longer(cols = everything(), names_to = "Variable", 
               values_to = "Correlation")

print(vital_correlations)

# Create scatter plots with a linear regression line for each vital variable 
vital_plots <- map(vital_vars, function(var) {
  ggplot(mimic_icu_cohort, aes_string(x = var, y = "los")) +
    geom_point(alpha = 0.3) +
    geom_smooth(method = "lm", color = "blue", se = TRUE) +
    labs(title = str_c("ICU LOS vs ", var),
         x = var, y = "ICU Length of Stay (los)") +
    theme_minimal()
})

# Display one example plot (for instance, BT vs los)
print(vital_plots[[4]])

# Optionally, arrange all plots in a grid if desired:
# library(patchwork)
# wrap_plots(vital_plots)

```
- Length of ICU stay `los` vs first ICU unit
```{r}

library(forcats)
# Numerical Summary: Compute group-level summaries for each ICU unit
los_summary <- mimic_icu_cohort %>%
  group_by(first_careunit) %>%
  summarise(
    mean_los = mean(los, na.rm = TRUE),
    median_los = median(los, na.rm = TRUE),
    iqr_los = IQR(los, na.rm = TRUE),
    n = n()
  )
print(los_summary)

# Graphical Summary: Create a boxplot of ICU LOS by first ICU unit
ggplot(mimic_icu_cohort, aes(x = fct_infreq(first_careunit), y = los)) +
  geom_boxplot(fill = "skyblue", outlier.color = "red") +
  labs(title = "ICU Length of Stay by First ICU Unit",
       x = "First ICU Unit",
       y = "ICU Length of Stay (los)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


```

